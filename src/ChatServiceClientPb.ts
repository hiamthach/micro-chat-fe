/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.2
// source: src/chat.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from 'grpc-web';

import * as src_chat_pb from '../src/chat_pb.d.ts';

export class ChatServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(hostname: string, credentials?: null | { [index: string]: string }, options?: null | { [index: string]: any }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSendMessage = new grpcWeb.MethodDescriptor(
    '/pb.ChatService/SendMessage',
    grpcWeb.MethodType.UNARY,
    src_chat_pb.SendMessageRequest,
    src_chat_pb.SendMessageResponse,
    (request: src_chat_pb.SendMessageRequest) => {
      return request.serializeBinary();
    },
    src_chat_pb.SendMessageResponse.deserializeBinary
  );

  sendMessage(request: src_chat_pb.SendMessageRequest, metadata: grpcWeb.Metadata | null): Promise<src_chat_pb.SendMessageResponse>;

  sendMessage(
    request: src_chat_pb.SendMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: src_chat_pb.SendMessageResponse) => void
  ): grpcWeb.ClientReadableStream<src_chat_pb.SendMessageResponse>;

  sendMessage(request: src_chat_pb.SendMessageRequest, metadata: grpcWeb.Metadata | null, callback?: (err: grpcWeb.RpcError, response: src_chat_pb.SendMessageResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(this.hostname_ + '/pb.ChatService/SendMessage', request, metadata || {}, this.methodDescriptorSendMessage, callback);
    }
    return this.client_.unaryCall(this.hostname_ + '/pb.ChatService/SendMessage', request, metadata || {}, this.methodDescriptorSendMessage);
  }

  methodDescriptorGetRoomMessages = new grpcWeb.MethodDescriptor(
    '/pb.ChatService/GetRoomMessages',
    grpcWeb.MethodType.UNARY,
    src_chat_pb.GetRoomMessagesRequest,
    src_chat_pb.GetRoomMessagesResponse,
    (request: src_chat_pb.GetRoomMessagesRequest) => {
      return request.serializeBinary();
    },
    src_chat_pb.GetRoomMessagesResponse.deserializeBinary
  );

  getRoomMessages(request: src_chat_pb.GetRoomMessagesRequest, metadata: grpcWeb.Metadata | null): Promise<src_chat_pb.GetRoomMessagesResponse>;

  getRoomMessages(
    request: src_chat_pb.GetRoomMessagesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: src_chat_pb.GetRoomMessagesResponse) => void
  ): grpcWeb.ClientReadableStream<src_chat_pb.GetRoomMessagesResponse>;

  getRoomMessages(
    request: src_chat_pb.GetRoomMessagesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: src_chat_pb.GetRoomMessagesResponse) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(this.hostname_ + '/pb.ChatService/GetRoomMessages', request, metadata || {}, this.methodDescriptorGetRoomMessages, callback);
    }
    return this.client_.unaryCall(this.hostname_ + '/pb.ChatService/GetRoomMessages', request, metadata || {}, this.methodDescriptorGetRoomMessages);
  }

  methodDescriptorCreateRoom = new grpcWeb.MethodDescriptor(
    '/pb.ChatService/CreateRoom',
    grpcWeb.MethodType.UNARY,
    src_chat_pb.CreateRoomRequest,
    src_chat_pb.CreateRoomResponse,
    (request: src_chat_pb.CreateRoomRequest) => {
      return request.serializeBinary();
    },
    src_chat_pb.CreateRoomResponse.deserializeBinary
  );

  createRoom(request: src_chat_pb.CreateRoomRequest, metadata: grpcWeb.Metadata | null): Promise<src_chat_pb.CreateRoomResponse>;

  createRoom(
    request: src_chat_pb.CreateRoomRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: src_chat_pb.CreateRoomResponse) => void
  ): grpcWeb.ClientReadableStream<src_chat_pb.CreateRoomResponse>;

  createRoom(request: src_chat_pb.CreateRoomRequest, metadata: grpcWeb.Metadata | null, callback?: (err: grpcWeb.RpcError, response: src_chat_pb.CreateRoomResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(this.hostname_ + '/pb.ChatService/CreateRoom', request, metadata || {}, this.methodDescriptorCreateRoom, callback);
    }
    return this.client_.unaryCall(this.hostname_ + '/pb.ChatService/CreateRoom', request, metadata || {}, this.methodDescriptorCreateRoom);
  }

  methodDescriptorJoinRoom = new grpcWeb.MethodDescriptor(
    '/pb.ChatService/JoinRoom',
    grpcWeb.MethodType.UNARY,
    src_chat_pb.JoinRoomRequest,
    src_chat_pb.JoinRoomResponse,
    (request: src_chat_pb.JoinRoomRequest) => {
      return request.serializeBinary();
    },
    src_chat_pb.JoinRoomResponse.deserializeBinary
  );

  joinRoom(request: src_chat_pb.JoinRoomRequest, metadata: grpcWeb.Metadata | null): Promise<src_chat_pb.JoinRoomResponse>;

  joinRoom(
    request: src_chat_pb.JoinRoomRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: src_chat_pb.JoinRoomResponse) => void
  ): grpcWeb.ClientReadableStream<src_chat_pb.JoinRoomResponse>;

  joinRoom(request: src_chat_pb.JoinRoomRequest, metadata: grpcWeb.Metadata | null, callback?: (err: grpcWeb.RpcError, response: src_chat_pb.JoinRoomResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(this.hostname_ + '/pb.ChatService/JoinRoom', request, metadata || {}, this.methodDescriptorJoinRoom, callback);
    }
    return this.client_.unaryCall(this.hostname_ + '/pb.ChatService/JoinRoom', request, metadata || {}, this.methodDescriptorJoinRoom);
  }
}
